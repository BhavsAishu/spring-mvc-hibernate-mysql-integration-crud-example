pipeline {
    
    agent any
    
    tools {
        
        maven 'maven'
        jdk 'java'
    }
    environment {
        NEXUS_VERSION = "nexus3"
        NEXUS_PROTOCOL = "http"
        NEXUS_URL = "13.233.216.110:8081"
        NEXUS_REPOSITORY = "Java-war-uploader"
        NEXUS_CREDENTIAL_ID = "nexus"
    }
    
    stages {
        
        stage ("git checkout") {
            
            steps {
            
            git 'https://github.com/BhavsAishu/spring-mvc-hibernate-mysql-integration-crud-example.git'
            
                
            }
        }
        
        
        stage ("build") {
            
            steps {
                
                script {
                    
                    sh 'mvn package -DskipTests=true'
                }
            }
        }
         stage ("Uplaod to nexus") {
            
            steps {
                
                script {
                     pom = readMavenPom file: "pom.xml";
                     filesByGlob = findFiles(glob: "target/*.${pom.packaging}");
                     echo "${filesByGlob[0].name} ${filesByGlob[0].path} ${filesByGlob[0].directory} ${filesByGlob[0].length} ${filesByGlob[0].lastModified}"
                    artifactPath = filesByGlob[0].path;
                    artifactExists = fileExists artifactPath;
                    if(artifactExists) {
                        echo "*** File: ${artifactPath}, group: ${pom.groupId}, packaging: ${pom.packaging}, version ${pom.version}";
                        nexusArtifactUploader(
                            nexusVersion: NEXUS_VERSION,
                            protocol: NEXUS_PROTOCOL,
                            nexusUrl: NEXUS_URL,
                            groupId: pom.groupId,
                            version: pom.version,
                            repository: NEXUS_REPOSITORY,
                            credentialsId: NEXUS_CREDENTIAL_ID,
                            artifacts: [
                                [artifactId: pom.artifactId,
                                classifier: '',
                                file: artifactPath,
                                type: pom.packaging],
                                [artifactId: pom.artifactId,
                                classifier: '',
                                file: "pom.xml",
                                type: "pom"]
                            ]
                        );
                    } else {
                        error "*** File: ${artifactPath}, could not be found";
                    }
                   
            }
           }
         }   
    }
    
}